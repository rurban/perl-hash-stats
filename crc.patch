Just trying performance and quality HW CRC32
In real code this should be checked in perl_init for CPU features.

I guess the hash function is not quite kosher yet, but gives a
rough estimate for the data I'm looking for: performance and
number of collisions.

diff --git hv_func.h hv_func.h
index 191912a..38134bc 100644
--- hv_func.h
+++ hv_func.h
@@ -21,6 +21,7 @@
         || defined(PERL_HASH_FUNC_ONE_AT_A_TIME) \
         || defined(PERL_HASH_FUNC_ONE_AT_A_TIME_HARD) \
         || defined(PERL_HASH_FUNC_ONE_AT_A_TIME_OLD) \
+        || defined(PERL_HASH_FUNC_CRC32) \
     )
 #define PERL_HASH_FUNC_ONE_AT_A_TIME_HARD
 #endif
@@ -57,6 +58,10 @@
 #   define PERL_HASH_FUNC "ONE_AT_A_TIME_OLD"
 #   define PERL_HASH_SEED_BYTES 4
 #   define PERL_HASH(hash,str,len) (hash)= S_perl_hash_old_one_at_a_time(PERL_HASH_SEED,(U8*)(str),(len))
+#elif defined(PERL_HASH_FUNC_CRC32)
+#   define PERL_HASH_FUNC "CRC32"
+#   define PERL_HASH_SEED_BYTES 4
+#   define PERL_HASH(hash,str,len) (hash)= S_perl_hash_crc32(PERL_HASH_SEED,(U8*)(str),(len))
 #endif
 
 #ifndef PERL_HASH
@@ -552,6 +557,48 @@ S_perl_hash_old_one_at_a_time(const unsigned char * const seed, const unsigned c
     return (hash + (hash << 15));
 }
 
+#ifdef __SSE4_2__
+#include <smmintrin.h>
+#endif
+
+/* Byte-boundary alignment issues */
+#define ALIGN_SIZE      0x08UL
+#define ALIGN_MASK      (ALIGN_SIZE - 1)
+#define CALC_CRC(op, crc, type, buf, len)                               \
+  do {                                                                  \
+    for (; (len) >= sizeof (type); (len) -= sizeof(type), buf += sizeof (type)) { \
+      (crc) = op((crc), *(type *) (buf));                               \
+    }                                                                   \
+  } while(0)
+
+PERL_STATIC_INLINE U32
+S_perl_hash_crc32(const unsigned char * const seed, const unsigned char *str, const STRLEN inlen) {
+    U32 hash = *((U32*)seed) + inlen;
+    const char* buf = (const char*)str;
+    STRLEN len = inlen;
+
+#ifdef __SSE4_2__
+    /* 32 bit only */
+    hash ^= 0xFFFFFFFF;
+    /* Align the input to the word boundary */
+    for (; (len > 0) && ((size_t)buf & ALIGN_MASK); len--, buf++) {
+        hash = _mm_crc32_u8(hash, *buf);
+    }
+
+#ifdef __x86_64__
+    CALC_CRC(_mm_crc32_u64, hash, uint64_t, buf, len);
+#endif
+    CALC_CRC(_mm_crc32_u32, hash, uint32_t, buf, len);
+    CALC_CRC(_mm_crc32_u16, hash, uint16_t, buf, len);
+    CALC_CRC(_mm_crc32_u8, hash, uint8_t, buf, len);
+#else
+    #error SW crc32 not good. Need Intel SSE4 processor for PERL_HASH_FUNC_CRC32
+#endif
+
+    /* 32 bit only */
+    return (hash ^ 0xFFFFFFFF);
+}
+
 /* legacy - only mod_perl should be doing this.  */
 #ifdef PERL_HASH_INTERNAL_ACCESS
 #define PERL_HASH_INTERNAL(hash,str,len) PERL_HASH(hash,str,len)
